name: Hello World Map

on:
  issues:
    types: [opened]
  workflow_dispatch: {}

permissions:
  contents: write
  issues: write

concurrency:
  group: hello-world-updates
  cancel-in-progress: false

jobs:
  handle-hi:
    runs-on: ubuntu-latest
    # Only proceed for issues like: title starts with "hi|" + label present + not a bot
    if: startsWith(github.event.issue.title, 'hi|') && contains(github.event.issue.labels.*.name, 'country-claim') && !endsWith(github.event.issue.user.login, '[bot]')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure data + template exist
        run: |
          mkdir -p data assets
          [ -f data/visitors.json ] || echo '{"countries":{},"firstVisitor":{},"byUser":{},"updatedAt":""}' > data/visitors.json
          [ -f README.tpl.md ] || cat > README.tpl.md <<'TPL'
          # 🌍 Say Hi From Your Country

          ![World map](assets/world.svg)

          **Say hi → [Open the interactive map](https://buralog.github.io/buralog/)**

          ## Stats
          - **Total countries:** {{TOTAL_COUNTRIES}}
          - **Total hellos:** {{TOTAL_HELLOS}}

          ## Visitors by Country
          {{COUNTRY_TABLE}}

          _Last updated: {{UPDATED_AT}}_
          TPL
          [ -f assets/world.template.svg ] || echo '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 50"><g id="legend"></g><text x="5" y="25">World map template placeholder</text></svg>' > assets/world.template.svg

      - name: Update guestbook and README
        env:
          ACTOR: ${{ github.event.issue.user.login }}
          TITLE: ${{ github.event.issue.title }}
        run: |
          node - <<'NODE'
          const fs = require('fs');

          const ACTOR = process.env.ACTOR;
          const TITLE = process.env.TITLE || '';
          const ISO = (TITLE.split('|')[1]||'').trim().toUpperCase();

          if (!/^[A-Z]{2}$/.test(ISO)) {
            console.log('Invalid ISO, skipping'); process.exit(0);
          }

          const path = 'data/visitors.json';
          const raw = fs.existsSync(path) ? JSON.parse(fs.readFileSync(path,'utf8')) : {countries:{},firstVisitor:{},byUser:{},updatedAt:""};
          raw.countries ||= {}; raw.firstVisitor ||= {}; raw.byUser ||= {};

          const user = raw.byUser[ACTOR] || {count:0,last:null,firstAt:null};

          let changed = false;
          if (user.count >= 2) {
            console.log('User limit reached, no-op');
          } else if (user.last === ISO) {
            console.log('Same country as last, no-op');
          } else {
            raw.countries[ISO] = (raw.countries[ISO]||0)+1;
            if (!raw.firstVisitor[ISO]) raw.firstVisitor[ISO] = ACTOR;
            user.count += 1; user.last = ISO; if (!user.firstAt) user.firstAt = new Date().toISOString();
            raw.byUser[ACTOR] = user;
            raw.updatedAt = new Date().toISOString();
            fs.writeFileSync(path, JSON.stringify(raw,null,2));
            changed = true;
          }

          // Build README from template
          const tpl = fs.readFileSync('README.tpl.md','utf8');
          const countries = Object.entries(raw.countries).sort((a,b)=> b[1]-a[1]);
          const totalHellos = countries.reduce((s,[,c])=>s+c,0);
          const totalCountries = countries.length;
          const table = ['| Country | Hellos | First |','|---|---:|---|', ...countries.map(([iso,count])=>{
            const first = raw.firstVisitor[iso] ? `@${raw.firstVisitor[iso]}` : '—';
            return `| ${iso} | ${count} | ${first} |`;
          })].join('\n');

          const out = tpl
            .replace('{{TOTAL_COUNTRIES}}', String(totalCountries))
            .replace('{{TOTAL_HELLOS}}', String(totalHellos))
            .replace('{{COUNTRY_TABLE}}', table)
            .replace('{{UPDATED_AT}}', raw.updatedAt || new Date().toISOString());

          fs.writeFileSync('README.md', out);

          // Write a small file to signal whether anything changed
          fs.writeFileSync('/tmp/changed.flag', changed ? '1' : '');
          NODE

      - name: Build choropleth world map SVG
        run: |
         npm i d3-geo xmldom node-fetch@2 --silent
         node scripts/build-svg-world-map.js

      - name: Commit changes (if any)
        run: |
          if [ -s /tmp/changed.flag ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "hello-world: update by ${{ github.event.issue.user.login }}"
            git push
          else
            echo "No changes to commit"
          fi

      - name: Thank, label, and close
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CHANGED=$(test -s /tmp/changed.flag && echo "yes" || echo "no")
          if [ "$CHANGED" = "yes" ]; then
            gh issue comment ${{ github.event.issue.number }} \
              --body "Thanks @${{ github.event.issue.user.login }}! Added your hello from **${{ github.event.issue.title }}**. The map & stats are updated. ✨"
          else
            gh issue comment ${{ github.event.issue.number }} \
              --body "Hey @${{ github.event.issue.user.login }} — your selection didn't change anything (same country as before or limit reached)."
          fi
          gh issue edit ${{ github.event.issue.number }} --add-label "hello-world"
          gh issue close ${{ github.event.issue.number }} --comment "Closed automatically ✅"